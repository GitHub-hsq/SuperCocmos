# ChatGPT Web 项目开发规则

## 项目概述
这是一个基于 Vue 3 + TypeScript + Express 的 ChatGPT Web 应用，支持双模型（官方 API 和 Web API）。

## 技术栈
- 前端: Vue 3, TypeScript, Vite, Pinia, Naive UI, Tailwind CSS, Vue I18n
- 后端: Express, TypeScript, ChatGPT API 封装
- 包管理: PNPM
- 代码规范: ESLint + Prettier

## 开发规则

### 1. 代码规范
- 严格使用 TypeScript，避免使用 `any` 类型
- 遵循 Vue 3 Composition API 最佳实践
- 使用 ESLint 和 Prettier 进行代码格式化
- 组件命名使用 PascalCase，文件命名使用 kebab-case
- 使用 `defineProps` 和 `defineEmits` 定义组件接口
- 优先使用 `ref` 和 `reactive` 管理响应式数据

### 2. 项目结构
- 前端代码在 `src/` 目录
- 后端代码在 `service/` 目录
- 组件放在 `src/components/` 目录
- 页面放在 `src/views/` 目录
- 状态管理在 `src/store/modules/` 目录
- 工具函数在 `src/utils/` 目录

### 3. 状态管理
- 使用 Pinia 进行状态管理
- 每个模块都有对应的 helper 函数
- 使用 `storeToRefs` 解构响应式状态
- 避免直接修改 store 状态，使用 actions

### 4. 组件开发
- 优先使用 Composition API
- 使用 `<script setup>` 语法
- 合理使用 `computed` 和 `watch`
- 组件要有清晰的 props 和 emits 定义
- 使用 `defineExpose` 暴露组件方法

### 5. 样式开发
- 优先使用 Tailwind CSS 原子化类名
- 自定义样式写在 `src/styles/` 目录
- 使用 Less 预处理器
- 支持暗色主题切换
- 响应式设计，支持移动端

### 6. API 调用
- 使用 axios 进行 HTTP 请求
- API 接口定义在 `src/api/` 目录
- 聊天接口使用流式响应（SSE）
- 完善的错误处理和用户提示
- 使用 TypeScript 定义请求和响应类型
- 当前项目的openai的API调用文档：https://aiapidoc.apifox.cn/

### 7. 国际化
- 所有用户可见文本使用 `t()` 函数
- 新增文本在 `src/locales/` 目录添加
- 支持中文、英文两种语言
- 使用 `useI18n` 组合式函数

### 8. 性能优化
- 使用 `v-memo` 优化列表渲染
- 合理使用 `computed` 缓存计算结果
- 图片懒加载和压缩
- 代码分割和按需加载
- 避免不必要的响应式数据

### 9. 安全考虑
- 敏感信息使用环境变量
- 设置 `AUTH_SECRET_KEY` 进行访问控制
- 实现请求限流防止滥用
- 输入验证和 XSS 防护
- 生产环境使用 HTTPS

### 10. 错误处理
- 使用 try-catch 处理异步操作
- 提供友好的错误提示
- 记录错误日志用于调试
- 网络错误要有重试机制

### 11. 测试
- 编写单元测试覆盖核心功能
- 使用 Vue Test Utils 测试组件
- 测试用户交互和边界情况
- 保持测试代码的可读性

### 12. 文档
- 复杂逻辑要有注释说明
- 组件要有清晰的文档
- API 接口要有类型定义
- 更新 CHANGELOG 记录变更

## 开发流程

### 1. 功能开发
- 先设计组件接口和数据结构
- 编写 TypeScript 类型定义
- 实现核心功能逻辑
- 添加样式和交互
- 编写测试用例

### 2. 代码审查
- 检查代码规范和类型安全
- 验证功能是否完整
- 确保性能优化
- 检查安全性问题

### 3. 部署准备
- 更新环境变量配置
- 检查构建配置
- 验证生产环境兼容性
- 更新部署文档

## 禁止事项
- 不要直接修改 node_modules
- 不要提交敏感信息到版本控制
- 不要使用过时的 API 或依赖
- 不要忽略 TypeScript 类型错误
- 不要在生产环境使用 console.log
- 除非用户主动要求，否则不要生成任何 Markdown (.md) 文档

## 环境配置
- Node.js 版本: ^16 || ^18 || ^19
- 使用 PNPM 作为包管理器
- 开发环境端口: 前端 1002，后端 3002
- 生产环境端口: 3002

## 常用命令
```bash
# 安装依赖
pnpm bootstrap

# 开发环境
pnpm dev

# 后端开发
cd service && pnpm start

# 构建
pnpm build

# 代码检查
pnpm lint

# 类型检查
pnpm type-check
```

## 注意事项
- 修改后端代码后需要重启服务
- 前端代码支持热重载
- 环境变量修改需要重启服务
- 部署前确保所有测试通过
- 保持代码库的整洁和可维护性
